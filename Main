var roleHarvester = require('role.harvester');
var roleUpgrader = require('role.upgrader');
var roleBuilder = require('role.builder');
var roleArcher = require('role.archer');
var roleRepairer = require('role.repairer');
var roleGuard = require('role.guard');

module.exports.loop = function () {

    console.log('---------------');

    for(var name in Memory.creeps) {
        if(!Game.creeps[name]) {
            delete Memory.creeps[name];
            console.log('Clearing non-existing creep memory:', name);
        }
    }

    var builders = _.filter(Game.creeps, (creep) => creep.memory.role == 'builder');
    console.log('Builders: ' + builders.length);
    var harvesters = _.filter(Game.creeps, (creep) => creep.memory.role == 'harvester');
    console.log('Harvesters: ' + harvesters.length);
    var upgraders = _.filter(Game.creeps, (creep) => creep.memory.role == 'upgrader');
    console.log('Upgraders: ' + upgraders.length);
    var repairers = _.filter(Game.creeps, (creep) => creep.memory.role == 'repairer');
    console.log('Repairers: ' + repairers.length);
    var guards = _.filter(Game.creeps, (creep) => creep.memory.role == 'guard');
    console.log('Guards: ' + guards.length);
    var archers = _.filter(Game.creeps, (creep) => creep.memory.role == 'archer');
    console.log('Archers: ' + archers.length);

    if(builders.length < 0) {
        var newName = 'Builder' + Game.time;
        console.log('Spawning new builder: ' + newName);
        Game.spawns['Spawn1'].spawnCreep([WORK,WORK,CARRY,MOVE], newName, 
            {memory: {role: 'builder'}});        
    }
    if(harvesters.length < 2) {
    var newName = 'Harvester' + Game.time;
        console.log('Spawning new harvester: ' + newName);
        Game.spawns['Spawn1'].spawnCreep([WORK,WORK,CARRY,MOVE], newName, 
            {memory: {role: 'harvester'}});        
    }
    if(upgraders.length < 3) {
    var newName = 'Upgrader' + Game.time;
        console.log('Spawning new upgrader: ' + newName);
        Game.spawns['Spawn1'].spawnCreep([WORK,WORK,CARRY,MOVE], newName, 
            {memory: {role: 'upgrader'}}, {memory: {isUpgrading: 'false'}});        
    }
    if(archers.length < 0) {
    var newName = 'Archer' + Game.time;
        console.log('Spawning new archer: ' + newName);
        Game.spawns['Spawn1'].spawnCreep([MOVE,MOVE,RANGED_ATTACK,RANGED_ATTACK], newName, 
            {memory: {role: 'archer'}}); 
    }        
    if(repairers.length < 2) {
    var newName = 'Repairer' + Game.time;
        console.log('Spawning new repairer: ' + newName);
        Game.spawns['Spawn1'].spawnCreep([WORK,WORK,CARRY,MOVE], newName, 
            {memory: {role: 'repairer'}}); 
    }  
    if(guards.length < 0) {
    var newName = 'Guard' + Game.time;
        console.log('Spawning new guard: ' + newName);
        Game.spawns['Spawn1'].spawnCreep([MOVE,TOUGH,ATTACK,ATTACK], newName,
            {memory: {role: 'guard'}});
    }
    
    if(Game.spawns['Spawn1'].spawning) { 
        var spawningCreep = Game.creeps[Game.spawns['Spawn1'].spawning.name];
        Game.spawns['Spawn1'].room.visual.text('🛠️' + spawningCreep.memory.role,Game.spawns['Spawn1'].pos.x + 1, Game.spawns['Spawn1'].pos.y,
        {align: 'left', opacity: 0.8});
    }


    for(var name in Game.creeps) {
        var creep = Game.creeps[name];
        if(creep.memory.role == 'harvester') {
            roleHarvester.run(creep);
        }
        if(creep.memory.role == 'upgrader') {
            roleUpgrader.run(creep);
        }
        if(creep.memory.role == 'builder'){
            roleBuilder.run(creep);
        }
        //if(creep.memory.role == 'archer'){
        //roleArcher.run(creep);
        //}
        if(creep.memory.role == 'repairer'){
            roleRepairer.run(creep);
        }
        if(creep.memory.role == 'guard'){
            roleGuard.run(creep);
        }
        
        var tower = Game.getObjectById('330c2a6aecfc515');
        if(tower) {
            var closestHostile = tower.pos.findClosestByRange(FIND_HOSTILE_CREEPS);
            if(closestHostile) {
                tower.attack(closestHostile);
            }
        }
    }
}
