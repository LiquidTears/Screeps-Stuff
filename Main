var roleHarvester = require('role.harvester');
var roleFiller = require('role.filler');
var roleUpgrader = require('role.upgrader');
var roleBuilder = require('role.builder');
var roleArcher = require('role.archer');
var roleRepairer = require('role.repairer');
var roleGuard = require('role.guard');
var roleFighter = require('role.fighter');
var roleClaimer = require('role.claimer');
var Respawner = require('Respawner');
//var towers = require('towers');
var roleMobileUpgrader = require('role.mobileupgrader');
var roleMobileWorker= require('role.mobileworker');
var roleTank = require('role.tank');

module.exports.loop = function () {

    console.log('---------------');

    for(var name in Memory.creeps) {
        if(!Game.creeps[name]) {
            delete Memory.creeps[name];
            console.log('Clearing non-existing creep memory:', name);
        }
    }

    Respawner.run();
    //towers.run();

    for(var name in Game.creeps) {
        var creep = Game.creeps[name];
        if(creep.memory.role == 'harvester') {
            roleHarvester.run(creep);
        }

        if(creep.memory.role == 'upgrader') {
            roleUpgrader.run(creep);
        }

        if(creep.memory.role == 'builder'){
            roleBuilder.run(creep);
        }

        if(creep.memory.role == 'repairer'){
            roleRepairer.run(creep);
        }

        if(creep.memory.role == 'guard'){
            roleGuard.run(creep);
        }
        
        if(creep.memory.role == 'fighter'){
            roleFighter.run(creep);
        }
        
        if(creep.memory.role == 'claimer'){
            roleClaimer.run(creep);
        }
        
        if(creep.memory.role == 'mobileupgrader'){
            roleMobileUpgrader.run(creep);
        }
        
        if(creep.memory.role == 'mobileworker'){
            roleMobileWorker.run(creep);
        }
        if(creep.memory.role == 'tank'){
            roleTank.run(creep);
        }
        var tower = Game.getObjectById('5a1cddd17805ab39f6360003');
        if(tower) {
            var closestHostile = tower.pos.findClosestByRange(FIND_HOSTILE_CREEPS);
            if(closestHostile) {
                tower.attack(closestHostile);
                console.log("ALERT!!! BASE UNDER ATTACK!!! THIS IS NOT A DRILL!!! ALERT!!!")
            } else {
                if(tower.energy > ((tower.energyCapacity / 10)* 6)){
                    var closestDamagedStructure = tower.room.find(FIND_STRUCTURES, {filter: (s) => s.hits < s.hitsMax});
                    if(closestDamagedStructure) {
                        closestDamagedStructure.sort((a,b) => a.hits - b.hits);
    	 	            tower.repair(closestDamagedStructure[0]);
                    }
                }
            }
        }
        var tower = Game.getObjectById('5a303d7ba9da96536a90ace6');
        if(tower) {
            var closestHostile = tower.pos.findClosestByRange(FIND_HOSTILE_CREEPS);
            if(closestHostile) {
                tower.attack(closestHostile);
                console.log("ALERT!!! BASE UNDER ATTACK!!! THIS IS NOT A DRILL!!! ALERT!!!")
            } else {
                if(tower.energy > ((tower.energyCapacity / 10)* 6)){
                    var closestDamagedStructure = tower.room.find(FIND_STRUCTURES, {filter: (s) => s.hits < s.hitsMax});
                    if(closestDamagedStructure) {
                        closestDamagedStructure.sort((a,b) => a.hits - b.hits);
    	 	            tower.repair(closestDamagedStructure[0]);
                    }
                }
            }
        }
        var tower = Game.getObjectById('5a347e022955b41fcda21b05');
        if(tower) {
            var closestHostile = tower.pos.findClosestByRange(FIND_HOSTILE_CREEPS);
            if(closestHostile) {
                tower.attack(closestHostile);
                console.log("ALERT!!! BASE UNDER ATTACK!!! THIS IS NOT A DRILL!!! ALERT!!!")
            } else {
                if(tower.energy > ((tower.energyCapacity / 10)* 6)){
                    var closestDamagedStructure = tower.room.find(FIND_STRUCTURES, {filter: (s) => s.hits < s.hitsMax});
                    if(closestDamagedStructure) {
                        closestDamagedStructure.sort((a,b) => a.hits - b.hits);
    	 	            tower.repair(closestDamagedStructure[0]);
                    }
                }
            }
        }
    }
}
